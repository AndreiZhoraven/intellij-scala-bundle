--- StartupUtil.java.orig	2020-04-21 13:37:19.913820017 +0200
+++ StartupUtil.java	2020-04-21 13:46:24.136783108 +0200
@@ -75,6 +75,7 @@
 
 public final class StartupUtil {
   public static final String IDEA_CLASS_BEFORE_APPLICATION_PROPERTY = "idea.class.before.app";
+  public static final String IDEA_STARTUP_LISTENER_PROPERTY = "idea.startup.listener";
 
   @SuppressWarnings("SpellCheckingInspection") private static final String MAGIC_MAC_PATH = "/AppTranslocation/";
 
@@ -125,6 +126,31 @@
     }
   }
 
+  @NotNull
+  private static StartupListener createStartupListener() {
+    String className = System.getProperty(IDEA_STARTUP_LISTENER_PROPERTY);
+    return className != null ? createStartupListener(className) : phase -> {};
+  }
+
+  @SuppressWarnings("UseOfSystemOutOrSystemErr")
+  private static StartupListener createStartupListener(String className) {
+    try {
+      return (StartupListener)Class.forName(className).newInstance();
+    }
+    catch (ClassNotFoundException e) {
+      System.err.println(IDEA_STARTUP_LISTENER_PROPERTY + " class not found: " + className);
+    }
+    catch (IllegalAccessException e) {
+      System.err.println("Cannot access " + IDEA_STARTUP_LISTENER_PROPERTY + " class: " + className);
+    }
+    catch (InstantiationException e) {
+      System.err.println("Cannot instantiate " + IDEA_STARTUP_LISTENER_PROPERTY + " class: " + className);
+    }
+
+    System.exit(Main.INSTALLATION_CORRUPTED);
+    throw new RuntimeException(); // returns Nothing
+  }
+
   private static void runPreAppClass(@NotNull Logger log) {
     String classBeforeAppProperty = System.getProperty(IDEA_CLASS_BEFORE_APPLICATION_PROPERTY);
     if (classBeforeAppProperty != null) {
@@ -140,6 +166,8 @@
   }
 
   public static void prepareApp(@NotNull String[] args, @NotNull String mainClass) throws Exception {
+    StartupListener startupListener = createStartupListener();
+
     LoadingState.setStrictMode();
 
     Activity activity = StartUpMeasurer.startMainActivity("ForkJoin CommonPool configuration");
@@ -174,6 +202,8 @@
     // this check must be performed before system directories are locked
     boolean configImportNeeded = !Main.isHeadless() && !Files.exists(Paths.get(configPath));
 
+    startupListener.before(StartupPhase.FOLDERS_CHECK);
+
     activity = activity.endAndStart("system dirs checking");
     // note: uses config directory
     if (!checkSystemDirs()) {
@@ -210,6 +240,8 @@
     Class<AppStarter> aClass = mainStartFuture.get();
     activity.end();
 
+    startupListener.before(StartupPhase.USER_AGREEMENT);
+
     startApp(args, initUiTask, log, configImportNeeded, aClass.newInstance());
   }
 
