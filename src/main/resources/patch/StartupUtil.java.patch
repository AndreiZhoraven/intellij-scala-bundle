--- StartupUtil.java
+++ StartupUtil.java
@@ -78,6 +78,7 @@
 public class StartupUtil {
   public static final String FORCE_PLUGIN_UPDATES = "idea.force.plugin.updates";
   public static final String IDEA_CLASS_BEFORE_APPLICATION_PROPERTY = "idea.class.before.app";
+  public static final String IDEA_STARTUP_LISTENER_PROPERTY = "idea.startup.listener";
 
   @SuppressWarnings("SpellCheckingInspection") private static final String MAGIC_MAC_PATH = "/AppTranslocation/";
 
@@ -127,6 +128,31 @@
     }
   }
 
+  @NotNull
+  private static StartupListener createStartupListener() {
+    String className = System.getProperty(IDEA_STARTUP_LISTENER_PROPERTY);
+    return className != null ? createStartupListener(className) : phase -> {};
+  }
+
+  @SuppressWarnings("UseOfSystemOutOrSystemErr")
+  private static StartupListener createStartupListener(String className) {
+    try {
+      return (StartupListener)Class.forName(className).newInstance();
+    }
+    catch (ClassNotFoundException e) {
+      System.err.println(IDEA_STARTUP_LISTENER_PROPERTY + " class not found: " + className);
+    }
+    catch (IllegalAccessException e) {
+      System.err.println("Cannot access " + IDEA_STARTUP_LISTENER_PROPERTY + " class: " + className);
+    }
+    catch (InstantiationException e) {
+      System.err.println("Cannot instantiate " + IDEA_STARTUP_LISTENER_PROPERTY + " class: " + className);
+    }
+
+    System.exit(Main.INSTALLATION_CORRUPTED);
+    throw new RuntimeException(); // returns Nothing
+  }
+
   private static void runPreAppClass(Logger log) {
     String classBeforeAppProperty = System.getProperty(IDEA_CLASS_BEFORE_APPLICATION_PROPERTY);
     if (classBeforeAppProperty != null) {
@@ -143,6 +169,8 @@
 
   static void prepareAndStart(@NotNull String[] args, @NotNull AppStarter appStarter)
     throws InvocationTargetException, InterruptedException, ExecutionException {
+    StartupListener startupListener = createStartupListener();
+
     IdeaForkJoinWorkerThreadFactory.setupForkJoinCommonPool(Main.isHeadless(args));
 
     // Before lockDirsAndConfigureLogger can be executed only tasks that do not require log,
@@ -180,6 +208,8 @@
     // this check must be performed before system directories are locked
     boolean newConfigFolder = !Main.isHeadless() && !new File(PathManager.getConfigPath()).exists();
 
+    startupListener.before(StartupPhase.FOLDERS_CHECK);
+
     Logger log = lockDirsAndConfigureLogger(args);
 
     boolean isParallelExecution = SystemProperties.getBooleanProperty("idea.prepare.app.start.parallel", true);
@@ -220,6 +250,8 @@
         appStarter.importFinished(newConfigDir);
       }
 
+      startupListener.before(StartupPhase.USER_AGREEMENT);
+
       showUserAgreementAndConsentsIfNeeded(log);
 
       if (newConfigFolder && !ConfigImportHelper.isConfigImported()) {
